import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/services.dart';
import 'package:tflite_flutter/tflite_flutter.dart';
import 'package:image/image.dart' as img;

class ObjectDetector {
  late Interpreter _interpreter;
  late List<String> labels;

  ObjectDetector._();

  static Future<ObjectDetector> create() async {
    final detector = ObjectDetector._();
    await detector._loadModel();
    return detector;
  }

  Future<void> _loadModel() async {
    try {
      _interpreter = await Interpreter.fromAsset('assets/model.tflite');
      String labelsData = await rootBundle.loadString('assets/labels.txt');
      labels = labelsData.split('\n');
      print("‚úÖ Model & Labels Loaded Successfully");
    } catch (e) {
      print("‚ùå Model Loading Failed: $e");
    }
  }

  Future<List<dynamic>?> runModelOnImage(File imageFile) async {
    if (_interpreter == null) {
      print("‚ùå Model not loaded yet!");
      return null;
    }

    // üìå ‡§∏‡§π‡•Ä ‡§á‡§®‡§™‡•Å‡§ü ‡§°‡•á‡§ü‡§æ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
    var input = preprocessImage(imageFile);
    var inputTensor = _interpreter.getInputTensor(0);
    var outputTensor = _interpreter.getOutputTensor(0);

    print("‚úÖ Expected Input Shape: ${inputTensor.shape}");
    print("‚úÖ Expected Output Shape: ${outputTensor.shape}");

    // ‚úÖ ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç
    var output = List.generate(
        outputTensor.shape[1], (i) => List.filled(outputTensor.shape[2], 0.0));

    // ‚úÖ ‡§Æ‡•â‡§°‡§≤ ‡§ï‡•ã ‡§∞‡§® ‡§ï‡§∞‡•á‡§Ç
    _interpreter.run(input, output);

    print("‚úÖ Model Output: $output");
    return output;
  }

  Uint8List preprocessImage(File imageFile) {
    img.Image? image = img.decodeImage(imageFile.readAsBytesSync());
    img.Image resizedImage = img.copyResize(image!, width: 224, height: 224);

    Uint8List inputBytes = Uint8List(224 * 224 * 3);
    int index = 0;

    for (int y = 0; y < 224; y++) {
      for (int x = 0; x < 224; x++) {
        img.Pixel pixel =
            resizedImage.getPixelSafe(x, y); // ‚úÖ `getPixelSafe()` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç

        int red = pixel.r.toInt(); // üî¥ ‡§∞‡•á‡§° ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç
        int green = pixel.g.toInt(); // üü¢ ‡§ó‡•ç‡§∞‡•Ä‡§® ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç
        int blue = pixel.b.toInt(); // üîµ ‡§¨‡•ç‡§≤‡•Ç ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç

        inputBytes[index++] = red;
        inputBytes[index++] = green;
        inputBytes[index++] = blue;
      }
    }

    return inputBytes;
  }

  void close() {
    _interpreter.close();
  }
}
